<?php

namespace DoctrineORMModule\Proxy\__CG__\sarah\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Sensor extends \sarah\Entity\Sensor implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = array();



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return array('__isInitialized__', '' . "\0" . 'sarah\\Entity\\Sensor' . "\0" . 'id', '' . "\0" . 'sarah\\Entity\\Sensor' . "\0" . 'name', '' . "\0" . 'sarah\\Entity\\Sensor' . "\0" . 'nodeEntity', '' . "\0" . 'sarah\\Entity\\Sensor' . "\0" . 'node', '' . "\0" . 'sarah\\Entity\\Sensor' . "\0" . 'description', '' . "\0" . 'sarah\\Entity\\Sensor' . "\0" . 'valueType', '' . "\0" . 'sarah\\Entity\\Sensor' . "\0" . 'units', '' . "\0" . 'sarah\\Entity\\Sensor' . "\0" . 'conversionFactor', '' . "\0" . 'sarah\\Entity\\Sensor' . "\0" . 'isRanged', '' . "\0" . 'sarah\\Entity\\Sensor' . "\0" . 'rangeMin', '' . "\0" . 'sarah\\Entity\\Sensor' . "\0" . 'rangeMax', '' . "\0" . 'sarah\\Entity\\Sensor' . "\0" . 'calibration', '' . "\0" . 'sarah\\Entity\\Sensor' . "\0" . 'graphStart', '' . "\0" . 'sarah\\Entity\\Sensor' . "\0" . 'isEnabled', '' . "\0" . 'sarah\\Entity\\Sensor' . "\0" . 'isWateringSensor', '' . "\0" . 'sarah\\Entity\\Sensor' . "\0" . 'wateringThresholdLower', '' . "\0" . 'sarah\\Entity\\Sensor' . "\0" . 'wateringThresholdUpper');
        }

        return array('__isInitialized__', '' . "\0" . 'sarah\\Entity\\Sensor' . "\0" . 'id', '' . "\0" . 'sarah\\Entity\\Sensor' . "\0" . 'name', '' . "\0" . 'sarah\\Entity\\Sensor' . "\0" . 'nodeEntity', '' . "\0" . 'sarah\\Entity\\Sensor' . "\0" . 'node', '' . "\0" . 'sarah\\Entity\\Sensor' . "\0" . 'description', '' . "\0" . 'sarah\\Entity\\Sensor' . "\0" . 'valueType', '' . "\0" . 'sarah\\Entity\\Sensor' . "\0" . 'units', '' . "\0" . 'sarah\\Entity\\Sensor' . "\0" . 'conversionFactor', '' . "\0" . 'sarah\\Entity\\Sensor' . "\0" . 'isRanged', '' . "\0" . 'sarah\\Entity\\Sensor' . "\0" . 'rangeMin', '' . "\0" . 'sarah\\Entity\\Sensor' . "\0" . 'rangeMax', '' . "\0" . 'sarah\\Entity\\Sensor' . "\0" . 'calibration', '' . "\0" . 'sarah\\Entity\\Sensor' . "\0" . 'graphStart', '' . "\0" . 'sarah\\Entity\\Sensor' . "\0" . 'isEnabled', '' . "\0" . 'sarah\\Entity\\Sensor' . "\0" . 'isWateringSensor', '' . "\0" . 'sarah\\Entity\\Sensor' . "\0" . 'wateringThresholdLower', '' . "\0" . 'sarah\\Entity\\Sensor' . "\0" . 'wateringThresholdUpper');
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Sensor $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', array());
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', array());
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', array());

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function setId($id)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setId', array($id));

        return parent::setId($id);
    }

    /**
     * {@inheritDoc}
     */
    public function getName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getName', array());

        return parent::getName();
    }

    /**
     * {@inheritDoc}
     */
    public function setName($name)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setName', array($name));

        return parent::setName($name);
    }

    /**
     * {@inheritDoc}
     */
    public function getDescription()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDescription', array());

        return parent::getDescription();
    }

    /**
     * {@inheritDoc}
     */
    public function setDescription($description)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDescription', array($description));

        return parent::setDescription($description);
    }

    /**
     * {@inheritDoc}
     */
    public function getValueType()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getValueType', array());

        return parent::getValueType();
    }

    /**
     * {@inheritDoc}
     */
    public function setValueType($valueType)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setValueType', array($valueType));

        return parent::setValueType($valueType);
    }

    /**
     * {@inheritDoc}
     */
    public function getUnits()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUnits', array());

        return parent::getUnits();
    }

    /**
     * {@inheritDoc}
     */
    public function setUnits($units)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUnits', array($units));

        return parent::setUnits($units);
    }

    /**
     * {@inheritDoc}
     */
    public function getIsRanged()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getIsRanged', array());

        return parent::getIsRanged();
    }

    /**
     * {@inheritDoc}
     */
    public function setIsRanged($isRanged)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setIsRanged', array($isRanged));

        return parent::setIsRanged($isRanged);
    }

    /**
     * {@inheritDoc}
     */
    public function getRangeMin()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getRangeMin', array());

        return parent::getRangeMin();
    }

    /**
     * {@inheritDoc}
     */
    public function setRangeMin($rangeMin)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setRangeMin', array($rangeMin));

        return parent::setRangeMin($rangeMin);
    }

    /**
     * {@inheritDoc}
     */
    public function getRangeMax()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getRangeMax', array());

        return parent::getRangeMax();
    }

    /**
     * {@inheritDoc}
     */
    public function setRangeMax($rangeMax)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setRangeMax', array($rangeMax));

        return parent::setRangeMax($rangeMax);
    }

    /**
     * {@inheritDoc}
     */
    public function getNewSensorValue()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getNewSensorValue', array());

        return parent::getNewSensorValue();
    }

    /**
     * {@inheritDoc}
     */
    public function getRange()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getRange', array());

        return parent::getRange();
    }

    /**
     * {@inheritDoc}
     */
    public function getIsEnabled()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getIsEnabled', array());

        return parent::getIsEnabled();
    }

    /**
     * {@inheritDoc}
     */
    public function setIsEnabled($isEnabled)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setIsEnabled', array($isEnabled));

        return parent::setIsEnabled($isEnabled);
    }

    /**
     * {@inheritDoc}
     */
    public function getCalibration()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCalibration', array());

        return parent::getCalibration();
    }

    /**
     * {@inheritDoc}
     */
    public function setCalibration($calibration)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCalibration', array($calibration));

        return parent::setCalibration($calibration);
    }

    /**
     * {@inheritDoc}
     */
    public function getIsWateringSensor()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getIsWateringSensor', array());

        return parent::getIsWateringSensor();
    }

    /**
     * {@inheritDoc}
     */
    public function setIsWateringSensor($isWateringSensor)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setIsWateringSensor', array($isWateringSensor));

        return parent::setIsWateringSensor($isWateringSensor);
    }

    /**
     * {@inheritDoc}
     */
    public function getWateringThresholdLower()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getWateringThresholdLower', array());

        return parent::getWateringThresholdLower();
    }

    /**
     * {@inheritDoc}
     */
    public function setWateringThresholdLower($wateringThresholdLower)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setWateringThresholdLower', array($wateringThresholdLower));

        return parent::setWateringThresholdLower($wateringThresholdLower);
    }

    /**
     * {@inheritDoc}
     */
    public function getWateringThresholdUpper()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getWateringThresholdUpper', array());

        return parent::getWateringThresholdUpper();
    }

    /**
     * {@inheritDoc}
     */
    public function setWateringThresholdUpper($wateringThresholdUpper)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setWateringThresholdUpper', array($wateringThresholdUpper));

        return parent::setWateringThresholdUpper($wateringThresholdUpper);
    }

    /**
     * {@inheritDoc}
     */
    public function getConversionFactor()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getConversionFactor', array());

        return parent::getConversionFactor();
    }

    /**
     * {@inheritDoc}
     */
    public function setConversionFactor($conversionFactor)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setConversionFactor', array($conversionFactor));

        return parent::setConversionFactor($conversionFactor);
    }

    /**
     * {@inheritDoc}
     */
    public function getNodeEntity()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getNodeEntity', array());

        return parent::getNodeEntity();
    }

    /**
     * {@inheritDoc}
     */
    public function setNodeEntity(\sarah\Entity\Node $node)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setNodeEntity', array($node));

        return parent::setNodeEntity($node);
    }

    /**
     * {@inheritDoc}
     */
    public function getGraphStart()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getGraphStart', array());

        return parent::getGraphStart();
    }

    /**
     * {@inheritDoc}
     */
    public function setGraphStart($graphStart)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setGraphStart', array($graphStart));

        return parent::setGraphStart($graphStart);
    }

    /**
     * {@inheritDoc}
     */
    public function toArray()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'toArray', array());

        return parent::toArray();
    }

    /**
     * {@inheritDoc}
     */
    public function getNode()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getNode', array());

        return parent::getNode();
    }

    /**
     * {@inheritDoc}
     */
    public function setNode($node)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setNode', array($node));

        return parent::setNode($node);
    }

}
